AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy the VPC and it's relevant components
Parameters:
  project:
    Type: String
    Default: leadhawk
    Description:  Project Name
  env:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, qa, stage]
    Description:  Environment Name
  app:
    Type: String
    Default: app
    Description:  Application Name   
  vpcCidr:
    Type: String
    Description: VPC CIDR
  vpcDnsEnabled:
    Type: String
    Default: True
    AllowedValues: [true, false]
    Description: Indicates whether the instances launched in the VPC get DNS hostnames
  vpcDnsSupport:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Indicates whether the DNS resolution is supported for the VPC or not
  publicIPActive:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Indicates whether instances receive a public IP address or not
  publicSubnet1Cidr:
    Type: String
    Description: Public Subnet
  publicSubnet2Cidr:
    Type: String
    Description: Public Subnet
  privateSubnet1Cidr:
    Type: String
    Description: Private Subnet
  privateSubnet2Cidr:
    Type: String
    Description: Private Subnet
  # publicSubnet3Cidr:
  #   Type: String
  #   Description: Public Subnet
  # publicSubnet4Cidr:
  #   Type: String
  #   Description: Public Subnet
Resources:
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsHostnames: !Ref vpcDnsEnabled
      EnableDnsSupport: !Ref vpcDnsSupport
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-vpc-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  #subnets public
  publicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref publicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: !Ref publicIPActive
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-public-subnet1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  publicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref publicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: !Ref publicIPActive
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-public-subnet2-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  # publicSubnet3:
  #   Type: "AWS::EC2::Subnet"
  #   Properties:
  #     CidrBlock: !Ref publicSubnet3Cidr
  #     AvailabilityZone: !Select [1, !GetAZs ""]
  #     VpcId: !Ref vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${project}-${env}-public-subnet3-${AWS::Region}"
  #       - Key: project
  #         Value: !Ref project
  #       - Key: environment
  #         Value: !Ref env
  # publicSubnet4:
  #   Type: "AWS::EC2::Subnet"
  #   Properties:
  #     CidrBlock: !Ref publicSubnet4Cidr
  #     AvailabilityZone: !Select [1, !GetAZs ""]
  #     VpcId: !Ref vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${project}-${env}-public-subnet4-${AWS::Region}"
  #       - Key: project
  #         Value: !Ref project
  #       - Key: environment
  #         Value: !Ref env
  #private subnet
  privateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref privateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-private-subnet1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  privateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref privateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-private-subnet2-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  #VpcinternetGateway
  internetGateWay:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-internetgateWay-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  internetGateWayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - vpc
      - internetGateWay
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetGateWay
  #natGateway
  natGateWay1:
    Type: "AWS::EC2::NatGateway"
    DependsOn: natGateWayElasticIP1
    Properties:
      SubnetId: !Ref publicSubnet1
      AllocationId: !GetAtt natGateWayElasticIP1.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-natgateway1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  natGateWayElasticIP1:
    Type: "AWS::EC2::EIP"
    DependsOn: internetGateWayAttachment
    Properties:
      Domain: "vpc"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-natGateWayElasticIP1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  #publicroutetable
  routeTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-public-routeTable-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  routeTablePublicRoute01:
    Type: "AWS::EC2::Route"
    DependsOn: internetGateWayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref routeTablePublic
      GatewayId: !Ref internetGateWay
  routeTablePublicAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref publicSubnet1
  routeTablePublicAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref publicSubnet2
  # routeTablePublicAssociation3:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     RouteTableId: !Ref routeTablePublic
  #     SubnetId: !Ref publicSubnet3
  # routeTablePublicAssociation4:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     RouteTableId: !Ref routeTablePublic
  #     SubnetId: !Ref publicSubnet4
  #privateroutetable
  routeTablePrivate1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-private-routeTable1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  routeTablePrivate1Route01:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref routeTablePrivate1
      NatGatewayId: !Ref natGateWay1
  routeTablePrivate1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref routeTablePrivate1
      SubnetId: !Ref privateSubnet1
  routeTablePrivate2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref routeTablePrivate1
      SubnetId: !Ref privateSubnet2
  #PublicNacl
  naclPublic01:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-naclPublic01-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  naclPublic01Ingress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic01
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  naclPublic01Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPublic01
      RuleNumber: 120
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  naclAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      NetworkAclId: !Ref naclPublic01
  naclAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      NetworkAclId: !Ref naclPublic01
  # naclAssociationPublicSubnet3:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties:
  #     SubnetId: !Ref publicSubnet3
  #     NetworkAclId: !Ref naclPublic01
  # naclAssociationPublicSubnet4:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties:
  #     SubnetId: !Ref publicSubnet4
  #     NetworkAclId: !Ref naclPublic01
  #privateNacl
  naclPrivate01:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-privateNACL1-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
  naclPrivate01Ingress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPrivate01
      RuleNumber: 140
      Protocol: -1
      RuleAction: allow
      CidrBlock: !Ref vpcCidr
  naclPrivate01Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclPrivate01
      RuleNumber: 150
      Protocol: -1
      Egress: True
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  naclAssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      NetworkAclId: !Ref naclPrivate01
  naclAssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      NetworkAclId: !Ref naclPrivate01
Outputs:
  vpcId:
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${env}-vpcId-${AWS::Region}"
  vpcCidrBlock:
    Value: !GetAtt vpc.CidrBlock
    Export:
      Name: !Sub "${project}-${env}-vpcCidrBlock-${AWS::Region}"
  defaultSecurityGroupId:
    Value: !GetAtt vpc.DefaultSecurityGroup
    Export:
      Name: !Sub "${project}-${env}-defaultSecurityGroupId-${AWS::Region}"
  publicSubnet1:
    Value: !Ref publicSubnet1
    Export:
      Name: !Sub "${project}-${env}-publicSubnet1-${AWS::Region}"
  publicSubnet2:
    Value: !Ref publicSubnet2
    Export:
      Name: !Sub "${project}-${env}-publicSubnet2-${AWS::Region}"
  privateSubnet1:
    Value: !Ref privateSubnet1
    Export:
      Name: !Sub "${project}-${env}-privateSubnet1-${AWS::Region}"
  privateSubnet2:
    Value: !Ref privateSubnet2
    Export:
      Name: !Sub "${project}-${env}-privateSubnet2-${AWS::Region}"
  # publicSubnet3:
  #   Value: !Ref publicSubnet3
  #   Export:
  #     Name: !Sub "${project}-${env}-publicSubnet3-${AWS::Region}"
  # publicSubnet4:
  #   Value: !Ref publicSubnet4
  #   Export:
  #     Name: !Sub "${project}-${env}-publicSubnet4-${AWS::Region}"
  natGateWay1:
    Value: !Ref natGateWay1
    Export:
      Name: !Sub "${project}-${env}-natGateWay1-${AWS::Region}"
  internetGateWay:
    Value: !Ref internetGateWay
    Export:
      Name: !Sub "${project}-${env}-internetGateWay-${AWS::Region}"
  SubnetIds:
    Description: List of Subnet IDs
    Value:
      !Join [
        ",",
        [
          !Ref publicSubnet1,
          !Ref publicSubnet2,
          # !Ref publicSubnet3,
          # !Ref publicSubnet4,
          !Ref privateSubnet1,
          !Ref privateSubnet2
        ]
      ]
    Export:
      Name: subnetId