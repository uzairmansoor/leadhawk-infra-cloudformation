AWSTemplateFormatVersion: "2010-09-09"
Description: 'CloudFormation Template to deploy IAM policies and roles'
Parameters:
  project:
    Type: String
    Default: leadhawk
    Description: Project Name
  env:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, qa, stage]
    Description: Environment Name
  app:
    Type: String
    Default: app
    Description: Application Name
  s3ArtifactsBucketName:
    Type: String
    Description: Name of bucket where artifacts are stored
  schedulerServiceEcrName:
    Type: String
    Description: Name of ECR repository where docker images are stored
  cwLambdaSchedulerLogGroupName:
    Type: String
    Description: CloudWatch log group name for lambda scheduler
  iamDeploymentUserName:
    Type: String
    Description: Name of an IAM user
  dataExtractorServiceEcrName:
    Type: String
    Description: Name of ECR where data extractor service docker images are stored
  scrapingServiceEcrName:
    Type: String
    Description: Name of ECR where scraping service docker images are stored
Resources:
  restrictDefaultSgExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${env}-restrictDefaultSg-lambdaExecRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Sub "${project}-${env}-${app}-ec2SecurityGroupPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-restrictDefaultSg-lambdaExecRole"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: restrictDefaultSg
  ec2InstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${env}-${app}-ec2InstanceIamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: !Sub "${project}-${env}-${app}-ec2CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*
        - PolicyName: !Sub "${project}-${env}-${app}-ec2S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${s3ArtifactsBucketName}/*"
        - PolicyName: !Sub "${project}-${env}-${app}-ec2InstancePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:DescribeImages
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:ListImages
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-ec2InstanceIamRole"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  ec2InstancIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${project}-${env}-${app}-ec2InstancIamProfile"
      Path: /
      Roles: 
        - !Ref ec2InstanceIamRole
  schedulerLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${env}-scheduler-lambdaExecRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${project}-${env}-${app}-ecrPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*" #${schedulerServiceEcrName}## After updating this, the role in the IAM roles needs to be updated as well.
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - "*"
        - PolicyName: !Sub "${project}-${env}-${app}-cwLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${cwLambdaSchedulerLogGroupName}"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-scheduler-lambdaExecRole"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: scheduler
  iamDeploymentUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${project}-${env}-deployment-user-iamPolicy"
      Users: 
        - !Ref iamDeploymentUserName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Resource: #Using a wildcard (*) due to a circular dependency between the S3 bucket and IAM roles
              - !Sub "arn:aws:s3:::${s3ArtifactsBucketName}"
              - !Sub "arn:aws:s3:::${s3ArtifactsBucketName}/*"
          - Effect: Allow
            Action:
              - cloudfront:CreateInvalidation
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
            Resource: "*"
          - Effect: Allow
            Action:
              - lambda:GetFunction
              - lambda:UpdateFunctionCode
            Resource: #Using a wildcard (*) due to a circular dependency between the Lambda func and IAM roles
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${project}-${env}-*-lambdaFunction"
  ec2ElasticSearchIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${env}-elasticSearch-ec2iamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: !Sub "${project}-${env}-elasticSearch-ec2S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${s3ArtifactsBucketName}/*"
        - PolicyName: !Sub "${project}-${env}-elasticSearch-ec2InstancePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeTags
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-elasticSearch-ec2iamRole"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: ec2ElasticSearch
  ec2ElasticSearchIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${project}-${env}-elasticSearch-ec2InstancIamProfile"
      Path: /
      Roles: 
        - !Ref ec2ElasticSearchIamRole
  ec2ScrapperIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${project}-${env}-scrapper-ec2iamRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: !Sub "${project}-${env}-scrapper-ec2S3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${s3ArtifactsBucketName}/*"
        - PolicyName: !Sub "${project}-${env}-scrapper-ec2CloudFormationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*
        - PolicyName: !Sub "${project}-${env}-scrapper-ec2EcrPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*" #${dataExtractorServiceEcrName}## After updating this, the role in the IAM roles needs to be updated as well.
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*" #${scrapingServiceEcrName}## After updating this, the role in the IAM roles needs to be updated as well.
              - Effect: Allow
                Action:
                  - comprehend:DetectEntities
                  - ecr:GetAuthorizationToken
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-elasticSearch-ec2iamRole"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: ec2ElasticSearch
  ec2ScrapperIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${project}-${env}-scrapper-ec2InstancIamProfile"
      Path: /
      Roles: 
        - !Ref ec2ScrapperIamRole
Outputs:
  restrictDefaultSgExecRoleArn:
    Description: The ARN of the Lambda execution role for restricting the default security group
    Value: !GetAtt restrictDefaultSgExecRole.Arn
    Export:
      Name: !Sub "${project}-${env}-restrictDefaultSg-lambdaExecRoleArn-${AWS::Region}"
  ec2InstanceIamRoleArn:
    Description: The ARN of the EC2 instance role
    Value: !GetAtt ec2InstanceIamRole.Arn
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2InstanceIamRoleArn-${AWS::Region}"
  ec2InstanceIamProfileName:
    Description: The name of the EC2 instance profile
    Value: !Ref ec2InstancIamProfile
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2InstanceIamProfileName-${AWS::Region}"
  schedulerLambdaExecRoleArn:
    Description: The ARN of the Lambda execution role for scheduler
    Value: !GetAtt schedulerLambdaExecRole.Arn
    Export:
      Name: !Sub "${project}-${env}-${app}-schedulerLambdaExecRoleArn-${AWS::Region}"
  iamDeploymentUserPolicyName:
    Description: The name of the IAM deployment user policy
    Value: !Ref iamDeploymentUserPolicy
    Export:
      Name: !Sub "${project}-${env}-${app}-iamDeploymentUserPolicyeName-${AWS::Region}"
  ec2ElasticSearchIamRoleArn:
    Description: The ARN of the Elastic Search EC2 instance role
    Value: !GetAtt ec2ElasticSearchIamRole.Arn
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2ElasticSearchIamRoleArn-${AWS::Region}"
  ec2ElasticSearchIamProfileName:
    Description: The name of the Elastic Search EC2 instance profile
    Value: !Ref ec2ElasticSearchIamProfile
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2ElasticSearchIamProfileName-${AWS::Region}"
  ec2ScrapperIamRoleArn:
    Description: The ARN of the Scrapper EC2 instance role
    Value: !GetAtt ec2ScrapperIamRole.Arn
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2ScrapperIamRoleArn-${AWS::Region}"
  ec2ScrapperIamProfileName:
    Description: The name of the Scrapper EC2 instance profile
    Value: !Ref ec2ScrapperIamProfile
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2ScrapperIamProfileName-${AWS::Region}"