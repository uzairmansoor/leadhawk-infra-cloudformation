AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy EC2 and its components
Parameters:
  project:
    Type: String
    Default: leadhawk
    Description: Project Name
  env:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, qa, stage]
    Description: Environment Name
  app:
    Type: String
    Default: app
    Description: Application Name
  ec2EnableEndpoint:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Specify whether to enable EC2 endpoint connect service or not
  ec2EndpointIdentifier:
    Type: String
    Default: ""
    Description: Unique identifier for EC2 endpoint(applicable iff EC2 endpoint is enabled)
  ec2EndpointPreserveClientIp:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Select true to preserve client IP for tracking , false otherwise(applicable iff EC2 endpoint is enabled)
  ec2EndpointSgIds:
    Type: AWS::EC2::SecurityGroup::Id
    Default: ""
    Description: Security group IDs for EC2 endpoint(applicable iff EC2 endpoint is enabled)
  ec2EndpointPrivateSubnetId:
    Type: AWS::EC2::Subnet::Id
    Default: ""
    Description: The private subnet ID to create EC2 endpoint in(applicable iff EC2 endpoint is enabled)
  imageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
  availabilityZone:
    Type: String
    Description: The Availability Zone of the instance
  instanceType:
    Type: String
    Description: The Instance type
  keyName:
    Type: String
    Description: The Name of the key pair
  ec2IamInstanceProfile:
    Type: String
    Description: Name of an EC2 Instance IAM profile
  securityGroupId:
    Type: String
    Description: The Security group ID
  ebsMappingDevineName:
    Type: String
    Description: Name of the device
  ebsVolumeSize:
    Type: Number 
    Default: 30
    Description: Size of the Ebs volume, in GiBs
  ebsVolumeType:
    Type: String
    AllowedValues: [io1 , gp3 , gp2]
    Default: gp3
    Description: Type of the Ebs volume
  subnetId:
    Type: String
    Description: The Subnet ID
  s3ArtifactsBucketName:
    Type: String
    Description: Name of bucket to store artifacts
  ec2EnableElasticIp:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
    Description: Specify whether to enable EC2 elastic IP or not
Conditions:
  isEnableEc2EndpointService: !Equals [!Ref ec2EnableEndpoint, yes]
  isEnableEc2ElasticIp: !Equals [!Ref ec2EnableElasticIp, yes]
Resources:
  ec2EndpointConnect:
    Type: AWS::EC2::InstanceConnectEndpoint
    Condition: isEnableEc2EndpointService
    Properties:
      ClientToken: !Ref ec2EndpointIdentifier
      PreserveClientIp: !Ref ec2EndpointPreserveClientIp
      SecurityGroupIds:
        - !Ref ec2EndpointSgIds
      SubnetId: !Ref ec2EndpointPrivateSubnetId
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-endpointConnect"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref imageId
      InstanceType: !Ref instanceType
      AvailabilityZone: !Ref availabilityZone
      KeyName: !Ref keyName
      IamInstanceProfile: !Ref ec2IamInstanceProfile
      SubnetId: !Ref subnetId
      SecurityGroupIds:
        - !Ref securityGroupId
      BlockDeviceMappings:
        - DeviceName: !Ref ebsMappingDevineName
          Ebs:
            VolumeSize: !Ref ebsVolumeSize
            VolumeType: !Ref ebsVolumeType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install AWS CLI and other dependencies
          sudo su
          sudo apt-get update -y
          sudo apt-get install -y awscli

          if [ "${app}" == "services" ]; then
            # Download and execute the ec2Services.sh script for the 'service' app 
            aws s3 cp s3://${s3ArtifactsBucketName}/code/scripts/ec2Services.sh /home/ubuntu/ec2Services.sh
            chmod +x /home/ubuntu/ec2Services.sh
            /home/ubuntu/ec2Services.sh
          elif [ "${app}" == "elasticSearch" ]; then
            # Download and execute the ec2ElasticSearch.sh script for the 'elasticSearch' app
            aws s3 cp s3://${s3ArtifactsBucketName}/code/scripts/ec2ElasticSearch.sh /home/ubuntu/ec2ElasticSearch.sh
            chmod +x /home/ubuntu/ec2ElasticSearch.sh
            /home/ubuntu/ec2ElasticSearch.sh
          elif [ "${app}" == "scrapper" ]; then
            # Download and execute the ec2Scrapper.sh script for the 'scrapper' app
            aws s3 cp s3://${s3ArtifactsBucketName}/code/scripts/ec2Scrapper.sh /home/ubuntu/ec2Scrapper.sh
            chmod +x /home/ubuntu/ec2Scrapper.sh
            /home/ubuntu/ec2Scrapper.sh
          fi
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-ec2Instance"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  elasticIp:
    Type: AWS::EC2::EIP
    Condition: isEnableEc2ElasticIp
    Properties:
      InstanceId: !Ref ec2Instance
      Tags:
        - Key: Name
          Value: !Sub "${project}-${env}-${app}-elasticIp"
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
Outputs:
  ec2EndpointConnect:
    Condition: isEnableEc2EndpointService
    Description: EC2 Instance Connect EndPoint Id
    Value: !Ref ec2EndpointConnect
    Export:
      Name: !Sub "${project}-${env}-${app}-endpointConnect-${AWS::Region}"
  ec2InstanceId:
    Description: Ec2 Instance Id
    Value: !Ref ec2Instance
    Export:
      Name: !Sub "${project}-${app}-${env}-ec2InstanceId"
  elasticIp:
    Description: Elastic IP
    Value: !Ref elasticIp
    Export:
      Name: !Sub "${project}-${app}-${env}-elasticIp"