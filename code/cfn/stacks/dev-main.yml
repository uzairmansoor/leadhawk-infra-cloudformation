Description: Driver template to deploy services for leadhawk project
Parameters:
  project:
    Type: String
    Default: leadhawk
    Description: Project Name
  env:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, qa, stage]
    Description: Environment Name
  app:
    Type: String
    Default: app
    Description: Application Name
  s3ArtifactPath:
    Type: String
    Default: "https://leadhawk-app-dev-us-east-1-627414718330.s3.amazonaws.com/code/cfn/services"
    Description: Artifact Bucket Path
Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/vpc/vpc-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        vpcCidr: 10.10.0.0/16
        publicIPActive: True
        vpcDnsEnabled: True
        vpcDnsSupport: True
        publicSubnet1Cidr: 10.10.1.0/24
        publicSubnet2Cidr: 10.10.2.0/24
        privateSubnet1Cidr: 10.10.3.0/24
        privateSubnet2Cidr: 10.10.4.0/24
        # publicSubnet3Cidr: 10.10.36.0/24
        # publicSubnet4Cidr: 10.10.37.0/24
  schedulerServiceEcr:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ecr/ecr-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: scheduler
        purgeRepo: True
  dataExtractorServiceEcr:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ecr/ecr-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: data-extractor
        purgeRepo: True
  scrapingServiceEcr:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ecr/ecr-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: scraping
        purgeRepo: True
  cwLogs:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/logs/logGroup-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
  iamDeploymentUser:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/iam/iamUser/iamUser-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: deployment
        createAccessKey: yes
  restrictDefaultSgLambdaFunction:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - iamRoles
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: restrictDefaultSg
        lambdaDescription: Lambda function for removing all inbound/outbound rules from the VPC default security group
        lambdaPackageType: Zip
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.restrictDefaultSgExecRoleArn
        lambdaRuntime: nodejs18.x
        lambdaHandler: __entrypoint__.handler
        lambdaEphemeralStorageSize: 512
        lambdaMemorySize: 128
        lambdaTimeout: 900
        lambdaSecurityGroup: ""
        deployInVPC: False
        privateSubnet01: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        privateSubnet02: !Select [3, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        s3BucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3ObjectKey: code/lambda/restrictDefaultSg/ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip
        ecrRepositoryUri: ""
        ecrImageTag: ""
  schedulerLambdaFunction:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - iamRoles
      - schedulerServiceEcr
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: scheduler
        lambdaDescription: Scheduler Lambda function
        lambdaPackageType: Image
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.schedulerLambdaExecRoleArn
        lambdaRuntime: ""
        lambdaHandler: ""
        lambdaEphemeralStorageSize: 512
        lambdaMemorySize: 128
        lambdaTimeout: 900
        lambdaSecurityGroup: ""
        deployInVPC: False
        privateSubnet01: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        privateSubnet02: !Select [3, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        s3BucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3ObjectKey: code/lambda/restrictDefaultSg/ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip
        ecrRepositoryUri: "627414718330.dkr.ecr.us-east-1.amazonaws.com/scheduler" #!GetAtt schedulerServiceEcr.Outputs.ecrRepoUri
        ## After updating this, the role in the IAM roles needs to be updated as well.
        ecrImageTag: latest
  cwEventRules:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cw/events/eventRule-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        schedulerLambdaFunctionArn: !GetAtt schedulerLambdaFunction.Outputs.lambdaFunctionArn
  securityGroup:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - restrictDefaultSgLambdaFunction
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/securityGroups/securityGroups-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        restrictDefaultSgLambdaFunctionArn: !GetAtt restrictDefaultSgLambdaFunction.Outputs.lambdaFunctionArn
        defaultSecurityGroupId: !GetAtt vpc.Outputs.defaultSecurityGroupId
        vpcId: !GetAtt vpc.Outputs.vpcId
        vpcCidrBlock: !GetAtt vpc.Outputs.vpcCidrBlock
  ec2Services:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - securityGroup
      - iamRoles
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2-app.yml"
      Parameters:
        project: !Ref project
        app: services
        env: !Ref env
        ec2EnableEndpoint: no #yes/no
        ec2EndpointIdentifier: !Sub "${project}-${env}-services-endpointConnect"
        ec2EndpointPreserveClientIp: true #true/false
        ec2EndpointPrivateSubnetId: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        ec2EndpointSgIds: !GetAtt securityGroup.Outputs.sgEc2ConnectEndpointId
        s3ArtifactsBucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        imageId: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
        availabilityZone: !Select [0, !GetAZs ""]
        instanceType: t3.medium
        keyName: !Sub "${project}-${env}-${app}-${AWS::Region}-KP"
        ec2IamInstanceProfile: !GetAtt iamRoles.Outputs.ec2InstanceIamProfileName
        securityGroupId: !GetAtt securityGroup.Outputs.sgServicesEc2Id
        ebsMappingDevineName: /dev/sda1
        ebsVolumeSize: 50
        ebsVolumeType: gp3
        subnetId: !Select [0, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        ec2EnableElasticIp: yes #yes/no
  ec2ElasticSearch:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - securityGroup
      - iamRoles
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2-app.yml"
      Parameters:
        project: !Ref project
        app: elasticSearch
        env: !Ref env
        ec2EnableEndpoint: no #yes/no
        ec2EndpointIdentifier: !Sub "${project}-${env}-elasticSearch-endpointConnect"
        ec2EndpointPreserveClientIp: true #true/false
        ec2EndpointPrivateSubnetId: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        ec2EndpointSgIds: !GetAtt securityGroup.Outputs.sgEc2ConnectEndpointId
        s3ArtifactsBucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        imageId: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
        availabilityZone: !Select [0, !GetAZs ""]
        instanceType: t3.medium
        keyName: !Sub "${project}-${env}-${app}-${AWS::Region}-KP"
        ec2IamInstanceProfile: !GetAtt iamRoles.Outputs.ec2ElasticSearchIamProfileName
        securityGroupId: !GetAtt securityGroup.Outputs.sgElasticSearchEc2Id
        ebsMappingDevineName: /dev/sda1
        ebsVolumeSize: 50
        ebsVolumeType: gp3
        subnetId: !Select [0, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        ec2EnableElasticIp: yes #yes/no
  # ec2Scrapper:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn:
  #     - vpc
  #     - securityGroup
  #     - iamRoles
  #   Properties:
  #     TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2-app.yml"
  #     Parameters:
  #       project: !Ref project
  #       app: scrapper
  #       env: !Ref env
  #       ec2EnableEndpoint: no #yes/no
  #       ec2EndpointIdentifier: !Sub "${project}-${env}-scrapper-endpointConnect"
  #       ec2EndpointPreserveClientIp: true #true/false
  #       ec2EndpointPrivateSubnetId: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
  #       ec2EndpointSgIds: !GetAtt securityGroup.Outputs.sgEc2ConnectEndpointId
  #       s3ArtifactsBucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
  #       imageId: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
  #       availabilityZone: !Select [0, !GetAZs ""]
  #       instanceType: t3.large
  #       keyName: !Sub "${project}-${env}-${app}-${AWS::Region}-KP"
  #       ec2IamInstanceProfile: !GetAtt iamRoles.Outputs.ec2ScrapperIamProfileName
  #       securityGroupId: !GetAtt securityGroup.Outputs.sgServicesEc2Id
  #       ebsMappingDevineName: /dev/sda1
  #       ebsVolumeSize: 100
  #       ebsVolumeType: gp3
  #       subnetId: !Select [0, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
  #       ec2EnableElasticIp: yes #yes/no
  s3FrontEndBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/s3/s3-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: frontend
        s3BucketAccessControl: Private
        s3VersioningStatus: Enabled
        s3ObjectOwnership: BucketOwnerPreferred
        sseAlgorithm: AES256
        indexDocument: index.html
        errorDocument: error.html
        enableWebsiteConfiguration: yes
        enableCfWritePolicy: no
        enableS3BucketPolicy: yes
  s3CfAccessLogBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/s3/s3-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: cflog
        s3BucketAccessControl: Private
        s3VersioningStatus: Enabled
        s3ObjectOwnership: BucketOwnerPreferred
        sseAlgorithm: AES256
        indexDocument: index.html
        errorDocument: error.html
        enableWebsiteConfiguration: no
        enableCfWritePolicy: no
        enableS3BucketPolicy: no
  iamRoles:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - schedulerServiceEcr
      - cwLogs
      - iamDeploymentUser
      - dataExtractorServiceEcr
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/iam/iamRoles/iamRoles-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        s3ArtifactsBucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        schedulerServiceEcrName: !GetAtt schedulerServiceEcr.Outputs.ecrRepoName
        cwLambdaSchedulerLogGroupName: !GetAtt cwLogs.Outputs.cwLambdaSchedulerLogGroupName
        iamDeploymentUserName: !GetAtt iamDeploymentUser.Outputs.iamUserName
        dataExtractorServiceEcrName: !GetAtt dataExtractorServiceEcr.Outputs.ecrRepoName
        scrapingServiceEcrName: !GetAtt scrapingServiceEcr.Outputs.ecrRepoName
  cloudFrontDistribution:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - s3CfAccessLogBucket
      - s3FrontEndBucket
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/cloudfront/cloudfront-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        cfDistributionStatus: true
        defaultTTL: 86400
        maxTTL: 31536000
        minTTL: 1
        targetDns: ""
        targetOriginId: !Sub "${env}-LoadBalancerOrigin"
        viewerProtocolPolicy: redirect-to-https
        originProtocolPolicy: https-only
        acmCertificateIdentifier: 2bcb5795-1723-43f4-8abf-6422324ca10a
        cfHttpsPort: 443
        cfOriginSSLProtocols: TLSv1.2
        cfAlias: !Sub "${env}.leadhawk.io"
        cfOriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
        cfResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
        cfHttpVersion: http2
        cfPriceClass: PriceClass_All
        acmCertificateProtocolVersion: TLSv1.2_2021
        acmCertificateSslSupportMethod: sni-only
        cfCachePolicyConfigComment: TTL for cache in cloudfront with ALB as an origin
        cfCachePolicyConfigName: !Sub "${project}-${env}-${app}-cfCachePolicyWithAlbOrigin"
        cfCachePolicyCookieBehavior: all
        cfCachePolicyHeaderBehavior: whitelist
        s3CfAccessLogBucketDomainName: !GetAtt s3CfAccessLogBucket.Outputs.s3BucketDomainName
        accessLogCookies: true
        accessLogPrefix: cloudFrontAccessLogs/
        cfDistComment: !Sub ${env} cloudfront distribution
        cfOriginAccessIdentityComment: S3 CloudFront origin access identity
        s3BucketDomainName: !GetAtt s3FrontEndBucket.Outputs.s3BucketDomainName
        s3OriginId: !Sub "${env}-S3Origin"
        isEnableCfLogging: yes
        cfCacheDisablePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
        cfEnableCacheRequestPolicy: yes
        enableAlias: yes
Outputs:
  vpc:
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${env}-${app}-vpc-${AWS::Region}"
  schedulerServiceEcr:
    Value: !Ref schedulerServiceEcr
    Export:
      Name: !Sub "${project}-${env}-${app}-schedulerServiceEcr-${AWS::Region}"
  dataExtractorServiceEcr:
    Value: !Ref dataExtractorServiceEcr
    Export:
      Name: !Sub "${project}-${env}-${app}-dataExtractorServiceEcr-${AWS::Region}"
  scrapingServiceEcr:
    Value: !Ref scrapingServiceEcr
    Export:
      Name: !Sub "${project}-${env}-${app}-scrapingServiceEcr-${AWS::Region}"
  cwLogs:
    Value: !Ref cwLogs
    Export:
      Name: !Sub "${project}-${env}-${app}-cwLogs-${AWS::Region}"
  iamDeploymentUser:
    Value: !Ref iamDeploymentUser
    Export:
      Name: !Sub "${project}-${env}-${app}-iamDeploymentUser-${AWS::Region}"
  restrictDefaultSgLambdaFunction:
    Value: !Ref restrictDefaultSgLambdaFunction
    Export:
      Name: !Sub "${project}-${env}-restrictDefaultSg-lambdaFunction-${AWS::Region}"
  schedulerLambdaFunction:
    Value: !Ref schedulerLambdaFunction
    Export:
      Name: !Sub "${project}-${env}-scheduler-lambdaFunction-${AWS::Region}"
  cwEventRules:
    Value: !Ref cwEventRules
    Export:
      Name: !Sub "${project}-${env}-${app}-cwEventRules-${AWS::Region}"
  securityGroup:
    Value: !Ref securityGroup
    Export:
      Name: !Sub "${project}-${env}-${app}-securityGroup-${AWS::Region}"
  ec2Services:
    Value: !Ref ec2Services
    Export:
      Name: !Sub "${project}-${env}-${app}-ec2Services-${AWS::Region}"
  iamRoles:
    Value: !Ref iamRoles
    Export:
      Name: !Sub "${project}-${env}-${app}-iamRoles-${AWS::Region}"
  s3FrontEndBucket:
    Value: !Ref s3FrontEndBucket
    Export:
      Name: !Sub "${project}-${env}-${app}-s3FrontEndBucket-${AWS::Region}"
  s3CfAccessLogBucket:
    Value: !Ref s3CfAccessLogBucket
    Export:
      Name: !Sub "${project}-${env}-${app}-s3CfAccessLogBucket-${AWS::Region}"
  cloudFrontDistribution:
    Value: !Ref cloudFrontDistribution
    Export:
      Name: !Sub "${project}-${env}-${app}-cloudFrontDistribution-${AWS::Region}"