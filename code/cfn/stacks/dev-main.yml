Description: Driver template to deploy services for leadhawk project
Parameters:
  project:
    Type: String
    Default: leadhawk
    Description: Project Name
  env:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, qa, stage]
    Description: Environment Name
  app:
    Type: String
    Default: app
    Description: Application Name
  s3ArtifactPath:
    Type: String
    Default: "https://leadhawk-app-dev-us-east-1-627414718330.s3.amazonaws.com/code/cfn/services"
    Description: Artifact Bucket Path
Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/vpc/vpc-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        vpcCidr: 10.10.0.0/16
        publicIPActive: True
        vpcDnsEnabled: True
        vpcDnsSupport: True
        publicSubnet1Cidr: 10.10.1.0/24
        publicSubnet2Cidr: 10.10.2.0/24
        privateSubnet1Cidr: 10.10.3.0/24
        privateSubnet2Cidr: 10.10.4.0/24
        # publicSubnet3Cidr: 10.10.36.0/24
        # publicSubnet4Cidr: 10.10.37.0/24
  iamRoles:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/iamRoles/iamRoles-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
  restrictDefaultSgLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/lambdaFunction/lambdaFunction-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: restrictDefaultSg
        lambdaDescription: Lambda function for removing all inbound/outbound rules from the VPC default security group
        lambdaPackageType: Zip
        lambdaExecutionRoleArn: !GetAtt iamRoles.Outputs.restrictDefaultSgRoleArn
        lambdaRuntime: nodejs18.x
        lambdaHandler: __entrypoint__.handler
        lambdaMemorySize: 128
        lambdaTimeout: 900
        lambdaSecurityGroup: ""
        deployInVPC: False
        privateSubnet01: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        privateSubnet02: !Select [3, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        s3BucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        s3ObjectKey: code/lambda/restrictDefaultSg/ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip
        ecrRepositoryUri: ""
        ecrImageTag: ""
  securityGroup:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - vpc
      - restrictDefaultSgLambdaFunction
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/securityGroups/securityGroups-app.yml"
      Parameters:
        project: !Ref project
        env: !Ref env
        app: !Ref app
        restrictDefaultSgLambdaFunctionArn: !GetAtt restrictDefaultSgLambdaFunction.Outputs.lambdaFunctionArn
        defaultSecurityGroupId: !GetAtt vpc.Outputs.defaultSecurityGroupId
        vpcId: !GetAtt vpc.Outputs.vpcId
  ec2:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${s3ArtifactPath}/ec2/ec2-app.yml"
      Parameters:
        project: !Ref project
        app: !Ref app
        env: !Ref env
        ec2EnableEndpoint: no #yes/no
        ec2EndpointIdentifier: !Sub "${project}-${env}-${app}-endpointConnect"
        ec2EndpointPreserveClientIp: true #true/false
        ec2EndpointPrivateSubnetId: !Select [2, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
        ec2EndpointSgIds: !GetAtt securityGroup.Outputs.sgEc2ConnectEndpointId
        s3ArtifactsBucketName: !Sub "${project}-${app}-${env}-${AWS::Region}-${AWS::AccountId}"
        imageId: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
        availabilityZone: !Select [0, !GetAZs ""]
        instanceType: t3.medium
        keyName: !Sub "${project}-${env}-${app}-${AWS::Region}-KP"
        ec2IamInstanceProfile: !GetAtt iamRoles.Outputs.ec2InstanceIamProfileName
        securityGroupId: !GetAtt securityGroup.Outputs.sgEc2Id
        ebsMappingDevineName: /dev/sda1
        ebsVolumeSize: 50
        ebsVolumeType: gp3
        subnetId: !Select [0, !Split [",", !GetAtt vpc.Outputs.SubnetIds]]
Outputs:
  vpc:
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${env}-${app}-vpc-${AWS::Region}"
  iamRoles:
    Value: !Ref iamRoles
    Export:
      Name: !Sub "${project}-${env}-${app}-iamRoles-${AWS::Region}"
  restrictDefaultSgLambdaFunction:
    Value: !Ref restrictDefaultSgLambdaFunction
    Export:
      Name: !Sub "${project}-${env}-restrictDefaultSg-lambdaFunction-${AWS::Region}"
  securityGroup:
    Value: !Ref securityGroup
    Export:
      Name: !Sub "${project}-${env}-${app}-securityGroup-${AWS::Region}"